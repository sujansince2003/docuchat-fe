generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next-Auth Models (required by Prisma Adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  chatSessions  ChatSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your Custom Models
model Document {
  id         String   @id @default(cuid())
  userId     String // Link to User
  filename   String
  filePath   String // Path where the PDF is stored on the server
  qdrantId   String?  @unique // ID in Qdrant for this document
  uploadedAt DateTime @default(now())

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatSessions ChatSession[] // Documents can have multiple chat sessions
}

model ChatSession {
  id         String   @id @default(cuid())
  userId     String // Link to User
  documentId String? // Optional: Link to a specific document
  createdAt  DateTime @default(now())

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document?     @relation(fields: [documentId], references: [id], onDelete: SetNull) // If document is deleted, set to null
  messages ChatMessage[]
}

model ChatMessage {
  id            String   @id @default(cuid())
  chatSessionId String
  sender        String // "logged in user" or "ai model"
  content       String   @db.Text
  timestamp     DateTime @default(now())

  chatSession ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
}
